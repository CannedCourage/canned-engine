//deque<GUI*> GUIStack;

//void PushGUI( GUI* const newGUI );
//GUI* const PopGUI( void );
//GUI* const SwapToGUI( GUI* const newGUI );
//void ClearGUIStack( void );

//if( !GUIStack.empty() )
	//GUIStack.front()->Update();

	/*
		deque<GUI*>::reverse_iterator itr;

		for( itr = GUIStack.rbegin(); itr != GUIStack.rend(); itr++ )
		{
			(*itr)->Render();
		}
		//*/

/*
#include "SceneManager\SceneManager.h"
#include "GUI\GUI.h"

void SceneManager::PushGUI( GUI* const newGUI )
{
	GUIStack.push_front( newGUI );
	GUIStack.front()->Load();
}

GUI* const SceneManager::PopGUI( void )
{
	GUIStack.front()->Unload();
	GUI* temp = GUIStack.front();
	GUIStack.pop_front();
	return temp;
}

GUI* const SceneManager::SwapToGUI( GUI* const newGUI )
{
	GUI* temp = PopGUI();
	PushGUI( newGUI );
	return temp;
}

void SceneManager::ClearGUIStack( void )
{
	while( !GUIStack.empty() )
	{
		GUIStack.front()->Unload();
		delete GUIStack.front();
		GUIStack.pop_front();
	}
}
//*/

//Base GUI class

#ifndef _GUI_H_
#define _GUI_H_

#include "SceneManager\IScene.h"
#include "GUI\Widget.h"
#include <list>

class System;

class GUI : public IScene
{
private:
protected:

	std::list<Widget*> widgets;
	std::list<Widget*>::iterator itr;

	void AddWidget( Widget* w );
public:

	GUI( System &s, const char* n = "DEFAULT_GUI" );
	~GUI( void );

	virtual void WidgetClicked(Widget* widget) = 0;
};

#endif //_GUI_H_

#include "GUI\GUI.h"
#include "System\System.h"

GUI::GUI( System &s, const char* n ) : IScene( s, n )
{
}

GUI::~GUI( void )
{
}

void GUI::AddWidget( Widget* w )
{
	widgets.push_back( w );
}

#ifndef _WIDGET_H_
#define _WIDGET_H_

#include "Maths\Vector.h"

class Widget
{
private:
protected:

	Vector position;
public:

	Widget( void );
	~Widget( void );

	void Load( void );
	void Unload( void );
	void Init( void );
	void Update( void );
	void Render( void );
	void CleanUp( void );

	void Move( float x, float y, float z );
};

#endif //_WIDGET_H_

#include "GUI\Widget.h"

Widget::Widget( void )
{
}

Widget::~Widget( void )
{
}