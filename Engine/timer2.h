<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  


  <head>
    <title>
      timer.h in ps/trunk/source/lib
     – Wildfire Games
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <!--[if IE]><script type="text/javascript">window.location.hash = window.location.hash;</script><![endif]-->
        <link rel="search" href="/search" />
        <link rel="help" href="/wiki/TracGuide" />
        <link rel="alternate" href="/browser/ps/trunk/source/lib/timer.h?format=txt" type="text/plain" title="Plain Text" /><link rel="alternate" href="/export/12774/ps/trunk/source/lib/timer.h" type="text/x-chdr; charset=iso-8859-15" title="Original Format" />
        <link rel="tracwysiwyg.base" href="/" />
        <link rel="start" href="/wiki" />
        <link rel="stylesheet" href="/chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="/chrome/common/css/code.css" type="text/css" /><link rel="stylesheet" href="/pygments/trac.css" type="text/css" /><link rel="stylesheet" href="/chrome/common/css/browser.css" type="text/css" /><link rel="stylesheet" href="/chrome/tracwysiwyg/wysiwyg.css" type="text/css" />
        <link rel="tracwysiwyg.stylesheet" href="/chrome/common/css/trac.css" /><link rel="tracwysiwyg.stylesheet" href="/chrome/tracwysiwyg/editor.css" />
        <link rel="prev" href="/browser/ps/trunk/source/lib/timer.h?rev=10017" title="Revision 10017" />
        <link rel="shortcut icon" href="/chrome/site/wfg.ico" type="image/x-icon" />
        <link rel="icon" href="/chrome/site/wfg.ico" type="image/x-icon" />
      <link type="application/opensearchdescription+xml" rel="search" href="/search/opensearch" title="Search Wildfire Games" />
    <script type="text/javascript" src="/chrome/common/js/jquery.js"></script><script type="text/javascript" src="/chrome/common/js/babel.js"></script><script type="text/javascript" src="/chrome/common/js/messages/en_US.js"></script><script type="text/javascript" src="/chrome/common/js/trac.js"></script><script type="text/javascript" src="/chrome/common/js/search.js"></script><script type="text/javascript" src="/chrome/tracwysiwyg/wysiwyg.js"></script><script type="text/javascript" src="/chrome/tracwysiwyg/wysiwyg-load.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
    <script type="text/javascript" src="/chrome/common/js/folding.js"></script>
    <script type="text/javascript">
      jQuery(document).ready(function($) {
        $(".trac-toggledeleted").show().click(function() {
                  $(this).siblings().find(".trac-deleted").toggle();
                  return false;
        }).click();
        $("#jumploc input").hide();
        $("#jumploc select").change(function () {
          this.parentNode.parentNode.submit();
        });
          $('#preview table.code').enableCollapsibleColumns($('#preview table.code thead th.content'));
      });
    </script>
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="/"><img src="/chrome/site/logoleft.gif" alt="Wildfire Games" height="86" width="331" /></a>
      </div>
      <form id="search" action="/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/login">Login</a></li><li><a href="/wiki/TracGuide">Help/Guide</a></li><li><a href="/about">About Trac</a></li><li><a href="/register">Register</a></li><li><a href="/reset_password">Forgot your password?</a></li><li class="last"><a href="/prefs">Preferences</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="/wiki">Wiki</a></li><li><a href="/timeline">Timeline</a></li><li><a href="/roadmap">Roadmap</a></li><li class="active"><a href="/browser">Browse Source</a></li><li><a href="/report">View Tickets</a></li><li class="last"><a href="/search">Search</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
              <li class="first"><span>&larr; <a class="prev" href="/browser/ps/trunk/source/lib/timer.h?rev=10017" title="Revision 10017">Previous Revision</a></span></li><li><span class="missing">Next Revision &rarr;</span></li><li><a href="/browser/ps/trunk/source/lib/timer.h?annotate=blame" title="Annotate each line with the last changed revision (this can be time consuming...)">Blame</a></li><li class="last"><a href="/log/ps/trunk/source/lib/timer.h">Revision Log</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="browser">
          <h1>
<a class="pathentry first" href="/browser?order=name" title="Go to repository root">source:</a>
<a class="pathentry" href="/browser/ps?order=name" title="View ps">ps</a><span class="pathentry sep">/</span><a class="pathentry" href="/browser/ps/trunk?order=name" title="View trunk">trunk</a><span class="pathentry sep">/</span><a class="pathentry" href="/browser/ps/trunk/source?order=name" title="View source">source</a><span class="pathentry sep">/</span><a class="pathentry" href="/browser/ps/trunk/source/lib?order=name" title="View lib">lib</a><span class="pathentry sep">/</span><a class="pathentry" href="/browser/ps/trunk/source/lib/timer.h?order=name" title="View timer.h">timer.h</a>
<span class="pathentry sep">@</span>
  <a class="pathentry" href="/changeset/12774" title="View changeset 12774">12774</a>
<br style="clear: both" />
</h1>
        <div id="jumprev">
          <form action="" method="get">
            <div>
              <label for="rev">
                View revision:</label>
              <input type="text" id="rev" name="rev" size="6" />
            </div>
          </form>
        </div>
      <table id="info" summary="Revision info">
        <tr>
          <th scope="col">Revision <a href="/changeset/10815">10815</a>,
            <span title="10350 bytes">10.1 KB</span>
            checked in by jan, <a class="timeline" href="/timeline?from=2011-12-27T14%3A12%3A31Z&amp;precision=second" title="2011-12-27T14:12:31Z in Timeline">10 months</a> ago
            (<a href="/changeset/10815/ps/trunk/source/lib/timer.h">diff</a>)</th>
        </tr>
        <tr>
          <td class="message searchable">
              <p>
sync with work:<br />
x86_x64: update MSR definitions to include model 2F (westmere ex); update bus clock computation for sandy bridge; remove unused cpu_Serialize; use namespace, add model names<br />
mahaf: cope with stricter security for services/drivers<br />
<a class="missing wiki">ApicId?</a> -&gt; <a class="missing wiki">GetApicId?</a>, move to apic module<br />
aken: add batch file to install driver (optional)<br />
</p>
          </td>
        </tr>
        <tr>
          <td colspan="2">
            <ul class="props">
              <li>
                  Property <strong>svn:eol-style</strong> set to
                  <em><code>native</code></em>
              </li>
            </ul>
          </td>
        </tr>
      </table>
      <div id="preview" class="searchable">
        
  <table class="code"><thead><tr><th class="lineno" title="Line numbers">Line</th><th class="content"> </th></tr></thead><tbody><tr><th id="L1"><a href="#L1">1</a></th><td><span class="cm">/* Copyright (c) 2010 Wildfire Games</span></td></tr><tr><th id="L2"><a href="#L2">2</a></th><td><span class="cm"> *</span></td></tr><tr><th id="L3"><a href="#L3">3</a></th><td><span class="cm"> * Permission is hereby granted, free of charge, to any person obtaining</span></td></tr><tr><th id="L4"><a href="#L4">4</a></th><td><span class="cm"> * a copy of this software and associated documentation files (the</span></td></tr><tr><th id="L5"><a href="#L5">5</a></th><td><span class="cm"> * "Software"), to deal in the Software without restriction, including</span></td></tr><tr><th id="L6"><a href="#L6">6</a></th><td><span class="cm"> * without limitation the rights to use, copy, modify, merge, publish,</span></td></tr><tr><th id="L7"><a href="#L7">7</a></th><td><span class="cm"> * distribute, sublicense, and/or sell copies of the Software, and to</span></td></tr><tr><th id="L8"><a href="#L8">8</a></th><td><span class="cm"> * permit persons to whom the Software is furnished to do so, subject to</span></td></tr><tr><th id="L9"><a href="#L9">9</a></th><td><span class="cm"> * the following conditions:</span></td></tr><tr><th id="L10"><a href="#L10">10</a></th><td><span class="cm"> * </span></td></tr><tr><th id="L11"><a href="#L11">11</a></th><td><span class="cm"> * The above copyright notice and this permission notice shall be included</span></td></tr><tr><th id="L12"><a href="#L12">12</a></th><td><span class="cm"> * in all copies or substantial portions of the Software.</span></td></tr><tr><th id="L13"><a href="#L13">13</a></th><td><span class="cm"> * </span></td></tr><tr><th id="L14"><a href="#L14">14</a></th><td><span class="cm"> * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,</span></td></tr><tr><th id="L15"><a href="#L15">15</a></th><td><span class="cm"> * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></td></tr><tr><th id="L16"><a href="#L16">16</a></th><td><span class="cm"> * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></td></tr><tr><th id="L17"><a href="#L17">17</a></th><td><span class="cm"> * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY</span></td></tr><tr><th id="L18"><a href="#L18">18</a></th><td><span class="cm"> * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,</span></td></tr><tr><th id="L19"><a href="#L19">19</a></th><td><span class="cm"> * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE</span></td></tr><tr><th id="L20"><a href="#L20">20</a></th><td><span class="cm"> * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span></td></tr><tr><th id="L21"><a href="#L21">21</a></th><td><span class="cm"> */</span></td></tr><tr><th id="L22"><a href="#L22">22</a></th><td></td></tr><tr><th id="L23"><a href="#L23">23</a></th><td><span class="cm">/*</span></td></tr><tr><th id="L24"><a href="#L24">24</a></th><td><span class="cm"> * platform-independent high resolution timer</span></td></tr><tr><th id="L25"><a href="#L25">25</a></th><td><span class="cm"> */</span></td></tr><tr><th id="L26"><a href="#L26">26</a></th><td><span class="cp"></span></td></tr><tr><th id="L27"><a href="#L27">27</a></th><td><span class="cp">#ifndef INCLUDED_TIMER</span></td></tr><tr><th id="L28"><a href="#L28">28</a></th><td><span class="cp">#define INCLUDED_TIMER</span></td></tr><tr><th id="L29"><a href="#L29">29</a></th><td><span class="cp"></span></td></tr><tr><th id="L30"><a href="#L30">30</a></th><td><span class="cp">#include "lib/config2.h"    </span><span class="c1">// CONFIG2_TIMER_ALLOW_RDTSC</span></td></tr><tr><th id="L31"><a href="#L31">31</a></th><td><span class="c1"></span><span class="cp">#include "lib/sysdep/cpu.h" </span><span class="c1">// cpu_AtomicAdd</span></td></tr><tr><th id="L32"><a href="#L32">32</a></th><td><span class="c1"></span><span class="cp">#if ARCH_X86_X64 &amp;&amp; CONFIG2_TIMER_ALLOW_RDTSC</span></td></tr><tr><th id="L33"><a href="#L33">33</a></th><td><span class="cp"># include "lib/sysdep/os_cpu.h" </span><span class="c1">// os_cpu_ClockFrequency</span></td></tr><tr><th id="L34"><a href="#L34">34</a></th><td><span class="c1"></span><span class="cp"># include "lib/sysdep/arch/x86_x64/x86_x64.h"   </span><span class="c1">// x86_x64::rdtsc</span></td></tr><tr><th id="L35"><a href="#L35">35</a></th><td><span class="c1"></span><span class="cp">#endif</span></td></tr><tr><th id="L36"><a href="#L36">36</a></th><td><span class="cp"></span></td></tr><tr><th id="L37"><a href="#L37">37</a></th><td></td></tr><tr><th id="L38"><a href="#L38">38</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L39"><a href="#L39">39</a></th><td><span class="cm"> * timer_Time will subsequently return values relative to the current time.</span></td></tr><tr><th id="L40"><a href="#L40">40</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L41"><a href="#L41">41</a></th><td>LIB_API <span class="kt">void</span> timer_LatchStartTime<span class="p">();</span></td></tr><tr><th id="L42"><a href="#L42">42</a></th><td></td></tr><tr><th id="L43"><a href="#L43">43</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L44"><a href="#L44">44</a></th><td><span class="cm"> * @return high resolution (&gt; 1 us) timestamp [s].</span></td></tr><tr><th id="L45"><a href="#L45">45</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L46"><a href="#L46">46</a></th><td>LIB_API <span class="kt">double</span> timer_Time<span class="p">();</span></td></tr><tr><th id="L47"><a href="#L47">47</a></th><td></td></tr><tr><th id="L48"><a href="#L48">48</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L49"><a href="#L49">49</a></th><td><span class="cm"> * @return resolution [s] of the timer.</span></td></tr><tr><th id="L50"><a href="#L50">50</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L51"><a href="#L51">51</a></th><td>LIB_API <span class="kt">double</span> timer_Resolution<span class="p">();</span></td></tr><tr><th id="L52"><a href="#L52">52</a></th><td></td></tr><tr><th id="L53"><a href="#L53">53</a></th><td></td></tr><tr><th id="L54"><a href="#L54">54</a></th><td><span class="c1">// (allow using XADD (faster than CMPXCHG) in 64-bit builds without casting)</span></td></tr><tr><th id="L55"><a href="#L55">55</a></th><td><span class="c1"></span><span class="cp">#if ARCH_AMD64</span></td></tr><tr><th id="L56"><a href="#L56">56</a></th><td><span class="cp"></span><span class="k">typedef</span> <span class="kt">intptr_t</span> Cycles<span class="p">;</span></td></tr><tr><th id="L57"><a href="#L57">57</a></th><td><span class="cp">#else</span></td></tr><tr><th id="L58"><a href="#L58">58</a></th><td><span class="cp"></span><span class="k">typedef</span> i64 Cycles<span class="p">;</span></td></tr><tr><th id="L59"><a href="#L59">59</a></th><td><span class="cp">#endif</span></td></tr><tr><th id="L60"><a href="#L60">60</a></th><td><span class="cp"></span></td></tr><tr><th id="L61"><a href="#L61">61</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L62"><a href="#L62">62</a></th><td><span class="cm"> * internal helper functions for returning an easily readable</span></td></tr><tr><th id="L63"><a href="#L63">63</a></th><td><span class="cm"> * string (i.e. re-scaled to appropriate units)</span></td></tr><tr><th id="L64"><a href="#L64">64</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L65"><a href="#L65">65</a></th><td>LIB_API std<span class="o">::</span>wstring StringForSeconds<span class="p">(</span><span class="kt">double</span> seconds<span class="p">);</span></td></tr><tr><th id="L66"><a href="#L66">66</a></th><td>LIB_API std<span class="o">::</span>wstring StringForCycles<span class="p">(</span>Cycles cycles<span class="p">);</span></td></tr><tr><th id="L67"><a href="#L67">67</a></th><td></td></tr><tr><th id="L68"><a href="#L68">68</a></th><td></td></tr><tr><th id="L69"><a href="#L69">69</a></th><td><span class="c1">//-----------------------------------------------------------------------------</span></td></tr><tr><th id="L70"><a href="#L70">70</a></th><td><span class="c1">// scope timing</span></td></tr><tr><th id="L71"><a href="#L71">71</a></th><td><span class="c1"></span></td></tr><tr><th id="L72"><a href="#L72">72</a></th><td><span class="c1">/// used by TIMER</span></td></tr><tr><th id="L73"><a href="#L73">73</a></th><td><span class="c1"></span>class ScopeTimer</td></tr><tr><th id="L74"><a href="#L74">74</a></th><td><span class="p">{</span></td></tr><tr><th id="L75"><a href="#L75">75</a></th><td>    NONCOPYABLE<span class="p">(</span>ScopeTimer<span class="p">);</span></td></tr><tr><th id="L76"><a href="#L76">76</a></th><td><span class="nl">public:</span></td></tr><tr><th id="L77"><a href="#L77">77</a></th><td>    ScopeTimer<span class="p">(</span><span class="k">const</span> <span class="kt">wchar_t</span><span class="o">*</span> description<span class="p">)</span></td></tr><tr><th id="L78"><a href="#L78">78</a></th><td>        <span class="o">:</span> m_t0<span class="p">(</span>timer_Time<span class="p">()),</span> m_description<span class="p">(</span>description<span class="p">)</span></td></tr><tr><th id="L79"><a href="#L79">79</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L80"><a href="#L80">80</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L81"><a href="#L81">81</a></th><td></td></tr><tr><th id="L82"><a href="#L82">82</a></th><td>    <span class="o">~</span>ScopeTimer<span class="p">()</span></td></tr><tr><th id="L83"><a href="#L83">83</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L84"><a href="#L84">84</a></th><td>        <span class="k">const</span> <span class="kt">double</span> t1 <span class="o">=</span> timer_Time<span class="p">();</span></td></tr><tr><th id="L85"><a href="#L85">85</a></th><td>        <span class="k">const</span> std<span class="o">::</span>wstring elapsedTimeString <span class="o">=</span> StringForSeconds<span class="p">(</span>t1<span class="o">-</span>m_t0<span class="p">);</span></td></tr><tr><th id="L86"><a href="#L86">86</a></th><td>        debug_printf<span class="p">(</span><span class="s">L"TIMER| %ls: %ls</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> m_description<span class="p">,</span> elapsedTimeString<span class="p">.</span>c_str<span class="p">());</span></td></tr><tr><th id="L87"><a href="#L87">87</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L88"><a href="#L88">88</a></th><td></td></tr><tr><th id="L89"><a href="#L89">89</a></th><td><span class="nl">private:</span></td></tr><tr><th id="L90"><a href="#L90">90</a></th><td>    <span class="kt">double</span> m_t0<span class="p">;</span></td></tr><tr><th id="L91"><a href="#L91">91</a></th><td>    <span class="k">const</span> <span class="kt">wchar_t</span><span class="o">*</span> m_description<span class="p">;</span></td></tr><tr><th id="L92"><a href="#L92">92</a></th><td><span class="p">};</span></td></tr><tr><th id="L93"><a href="#L93">93</a></th><td></td></tr><tr><th id="L94"><a href="#L94">94</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L95"><a href="#L95">95</a></th><td><span class="cm"> * Measures the time taken to execute code up until end of the current scope; </span></td></tr><tr><th id="L96"><a href="#L96">96</a></th><td><span class="cm"> * displays it via debug_printf. Can safely be nested.</span></td></tr><tr><th id="L97"><a href="#L97">97</a></th><td><span class="cm"> * Useful for measuring time spent in a function or basic block.</span></td></tr><tr><th id="L98"><a href="#L98">98</a></th><td><span class="cm"> * &lt;description&gt; must remain valid over the lifetime of this object;</span></td></tr><tr><th id="L99"><a href="#L99">99</a></th><td><span class="cm"> * a string literal is safest.</span></td></tr><tr><th id="L100"><a href="#L100">100</a></th><td><span class="cm"> * </span></td></tr><tr><th id="L101"><a href="#L101">101</a></th><td><span class="cm"> * Example usage:</span></td></tr><tr><th id="L102"><a href="#L102">102</a></th><td><span class="cm"> *  void func()</span></td></tr><tr><th id="L103"><a href="#L103">103</a></th><td><span class="cm"> *  {</span></td></tr><tr><th id="L104"><a href="#L104">104</a></th><td><span class="cm"> *      TIMER(L"description");</span></td></tr><tr><th id="L105"><a href="#L105">105</a></th><td><span class="cm"> *      // code to be measured</span></td></tr><tr><th id="L106"><a href="#L106">106</a></th><td><span class="cm"> *  }</span></td></tr><tr><th id="L107"><a href="#L107">107</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L108"><a href="#L108">108</a></th><td><span class="cp">#define TIMER(description) ScopeTimer UID__(description)</span></td></tr><tr><th id="L109"><a href="#L109">109</a></th><td><span class="cp"></span></td></tr><tr><th id="L110"><a href="#L110">110</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L111"><a href="#L111">111</a></th><td><span class="cm"> * Measures the time taken to execute code between BEGIN and END markers;</span></td></tr><tr><th id="L112"><a href="#L112">112</a></th><td><span class="cm"> * displays it via debug_printf. Can safely be nested.</span></td></tr><tr><th id="L113"><a href="#L113">113</a></th><td><span class="cm"> * Useful for measuring several pieces of code within the same function/block.</span></td></tr><tr><th id="L114"><a href="#L114">114</a></th><td><span class="cm"> * &lt;description&gt; must remain valid over the lifetime of this object;</span></td></tr><tr><th id="L115"><a href="#L115">115</a></th><td><span class="cm"> * a string literal is safest.</span></td></tr><tr><th id="L116"><a href="#L116">116</a></th><td><span class="cm"> * </span></td></tr><tr><th id="L117"><a href="#L117">117</a></th><td><span class="cm"> * Caveats:</span></td></tr><tr><th id="L118"><a href="#L118">118</a></th><td><span class="cm"> * - this wraps the code to be measured in a basic block, so any</span></td></tr><tr><th id="L119"><a href="#L119">119</a></th><td><span class="cm"> *   variables defined there are invisible to surrounding code.</span></td></tr><tr><th id="L120"><a href="#L120">120</a></th><td><span class="cm"> * - the description passed to END isn't inspected; you are responsible for</span></td></tr><tr><th id="L121"><a href="#L121">121</a></th><td><span class="cm"> *   ensuring correct nesting!</span></td></tr><tr><th id="L122"><a href="#L122">122</a></th><td><span class="cm"> * </span></td></tr><tr><th id="L123"><a href="#L123">123</a></th><td><span class="cm"> * Example usage:</span></td></tr><tr><th id="L124"><a href="#L124">124</a></th><td><span class="cm"> *  void func2()</span></td></tr><tr><th id="L125"><a href="#L125">125</a></th><td><span class="cm"> *  {</span></td></tr><tr><th id="L126"><a href="#L126">126</a></th><td><span class="cm"> *      // uninteresting code</span></td></tr><tr><th id="L127"><a href="#L127">127</a></th><td><span class="cm"> *      TIMER_BEGIN(L"description2");</span></td></tr><tr><th id="L128"><a href="#L128">128</a></th><td><span class="cm"> *      // code to be measured</span></td></tr><tr><th id="L129"><a href="#L129">129</a></th><td><span class="cm"> *      TIMER_END(L"description2");</span></td></tr><tr><th id="L130"><a href="#L130">130</a></th><td><span class="cm"> *      // uninteresting code</span></td></tr><tr><th id="L131"><a href="#L131">131</a></th><td><span class="cm"> *  }</span></td></tr><tr><th id="L132"><a href="#L132">132</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L133"><a href="#L133">133</a></th><td><span class="cp">#define TIMER_BEGIN(description) { ScopeTimer UID__(description)</span></td></tr><tr><th id="L134"><a href="#L134">134</a></th><td><span class="cp">#define TIMER_END(description) }</span></td></tr><tr><th id="L135"><a href="#L135">135</a></th><td><span class="cp"></span></td></tr><tr><th id="L136"><a href="#L136">136</a></th><td></td></tr><tr><th id="L137"><a href="#L137">137</a></th><td><span class="c1">//-----------------------------------------------------------------------------</span></td></tr><tr><th id="L138"><a href="#L138">138</a></th><td><span class="c1">// cumulative timer API</span></td></tr><tr><th id="L139"><a href="#L139">139</a></th><td><span class="c1"></span></td></tr><tr><th id="L140"><a href="#L140">140</a></th><td><span class="c1">// this supplements in-game profiling by providing low-overhead,</span></td></tr><tr><th id="L141"><a href="#L141">141</a></th><td><span class="c1">// high resolution time accounting of specific areas.</span></td></tr><tr><th id="L142"><a href="#L142">142</a></th><td><span class="c1"></span></td></tr><tr><th id="L143"><a href="#L143">143</a></th><td><span class="c1">// since TIMER_ACCRUE et al. are called so often, we try to keep</span></td></tr><tr><th id="L144"><a href="#L144">144</a></th><td><span class="c1">// overhead to an absolute minimum. storing raw tick counts (e.g. CPU cycles</span></td></tr><tr><th id="L145"><a href="#L145">145</a></th><td><span class="c1">// returned by x86_x64::rdtsc) instead of absolute time has two benefits:</span></td></tr><tr><th id="L146"><a href="#L146">146</a></th><td><span class="c1">// - no need to convert from raw-&gt;time on every call</span></td></tr><tr><th id="L147"><a href="#L147">147</a></th><td><span class="c1">//   (instead, it's only done once when displaying the totals)</span></td></tr><tr><th id="L148"><a href="#L148">148</a></th><td><span class="c1">// - possibly less overhead to querying the time itself</span></td></tr><tr><th id="L149"><a href="#L149">149</a></th><td><span class="c1">//   (timer_Time may be using slower time sources with ~3us overhead)</span></td></tr><tr><th id="L150"><a href="#L150">150</a></th><td><span class="c1">//</span></td></tr><tr><th id="L151"><a href="#L151">151</a></th><td><span class="c1">// however, the cycle count is not necessarily a measure of wall-clock time</span></td></tr><tr><th id="L152"><a href="#L152">152</a></th><td><span class="c1">// (see http://www.gamedev.net/reference/programming/features/timing).</span></td></tr><tr><th id="L153"><a href="#L153">153</a></th><td><span class="c1">// therefore, on systems with SpeedStep active, measurements of I/O or other</span></td></tr><tr><th id="L154"><a href="#L154">154</a></th><td><span class="c1">// non-CPU bound activity may be skewed. this is ok because the timer is</span></td></tr><tr><th id="L155"><a href="#L155">155</a></th><td><span class="c1">// only used for profiling; just be aware of the issue.</span></td></tr><tr><th id="L156"><a href="#L156">156</a></th><td><span class="c1">// if this is a problem, disable CONFIG2_TIMER_ALLOW_RDTSC.</span></td></tr><tr><th id="L157"><a href="#L157">157</a></th><td><span class="c1">// </span></td></tr><tr><th id="L158"><a href="#L158">158</a></th><td><span class="c1">// note that overflow isn't an issue either way (63 bit cycle counts</span></td></tr><tr><th id="L159"><a href="#L159">159</a></th><td><span class="c1">// at 10 GHz cover intervals of 29 years).</span></td></tr><tr><th id="L160"><a href="#L160">160</a></th><td><span class="c1"></span><span class="cp"></span></td></tr><tr><th id="L161"><a href="#L161">161</a></th><td><span class="cp">#if ARCH_X86_X64 &amp;&amp; CONFIG2_TIMER_ALLOW_RDTSC</span></td></tr><tr><th id="L162"><a href="#L162">162</a></th><td><span class="cp"></span></td></tr><tr><th id="L163"><a href="#L163">163</a></th><td>class TimerUnit</td></tr><tr><th id="L164"><a href="#L164">164</a></th><td><span class="p">{</span></td></tr><tr><th id="L165"><a href="#L165">165</a></th><td><span class="nl">public:</span></td></tr><tr><th id="L166"><a href="#L166">166</a></th><td>    <span class="kt">void</span> SetToZero<span class="p">()</span></td></tr><tr><th id="L167"><a href="#L167">167</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L168"><a href="#L168">168</a></th><td>        m_cycles <span class="o">=</span> <span class="mi">0</span><span class="p">;</span></td></tr><tr><th id="L169"><a href="#L169">169</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L170"><a href="#L170">170</a></th><td></td></tr><tr><th id="L171"><a href="#L171">171</a></th><td>    <span class="kt">void</span> SetFromTimer<span class="p">()</span></td></tr><tr><th id="L172"><a href="#L172">172</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L173"><a href="#L173">173</a></th><td>        m_cycles <span class="o">=</span> x86_x64<span class="o">::</span>rdtsc<span class="p">();</span></td></tr><tr><th id="L174"><a href="#L174">174</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L175"><a href="#L175">175</a></th><td></td></tr><tr><th id="L176"><a href="#L176">176</a></th><td>    <span class="kt">void</span> AddDifference<span class="p">(</span>TimerUnit t0<span class="p">,</span> TimerUnit t1<span class="p">)</span></td></tr><tr><th id="L177"><a href="#L177">177</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L178"><a href="#L178">178</a></th><td>        m_cycles <span class="o">+=</span> t1<span class="p">.</span>m_cycles <span class="o">-</span> t0<span class="p">.</span>m_cycles<span class="p">;</span></td></tr><tr><th id="L179"><a href="#L179">179</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L180"><a href="#L180">180</a></th><td></td></tr><tr><th id="L181"><a href="#L181">181</a></th><td>    <span class="kt">void</span> AddDifferenceAtomic<span class="p">(</span>TimerUnit t0<span class="p">,</span> TimerUnit t1<span class="p">)</span></td></tr><tr><th id="L182"><a href="#L182">182</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L183"><a href="#L183">183</a></th><td>        <span class="k">const</span> Cycles delta <span class="o">=</span> t1<span class="p">.</span>m_cycles <span class="o">-</span> t0<span class="p">.</span>m_cycles<span class="p">;</span></td></tr><tr><th id="L184"><a href="#L184">184</a></th><td><span class="cp">#if ARCH_AMD64</span></td></tr><tr><th id="L185"><a href="#L185">185</a></th><td><span class="cp"></span>        cpu_AtomicAdd<span class="p">(</span><span class="o">&amp;</span>m_cycles<span class="p">,</span> delta<span class="p">);</span></td></tr><tr><th id="L186"><a href="#L186">186</a></th><td><span class="cp">#elif ARCH_IA32</span></td></tr><tr><th id="L187"><a href="#L187">187</a></th><td><span class="cp"></span><span class="nl">retry:</span></td></tr><tr><th id="L188"><a href="#L188">188</a></th><td>        <span class="k">if</span><span class="p">(</span><span class="o">!</span>cpu_CAS64<span class="p">(</span><span class="o">&amp;</span>m_cycles<span class="p">,</span> m_cycles<span class="p">,</span> m_cycles<span class="o">+</span>delta<span class="p">))</span></td></tr><tr><th id="L189"><a href="#L189">189</a></th><td>            <span class="k">goto</span> retry<span class="p">;</span></td></tr><tr><th id="L190"><a href="#L190">190</a></th><td><span class="cp">#else</span></td></tr><tr><th id="L191"><a href="#L191">191</a></th><td><span class="cp"># error "port"</span></td></tr><tr><th id="L192"><a href="#L192">192</a></th><td><span class="cp">#endif</span></td></tr><tr><th id="L193"><a href="#L193">193</a></th><td><span class="cp"></span>    <span class="p">}</span></td></tr><tr><th id="L194"><a href="#L194">194</a></th><td></td></tr><tr><th id="L195"><a href="#L195">195</a></th><td>    <span class="kt">void</span> Subtract<span class="p">(</span>TimerUnit t<span class="p">)</span></td></tr><tr><th id="L196"><a href="#L196">196</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L197"><a href="#L197">197</a></th><td>        m_cycles <span class="o">-=</span> t<span class="p">.</span>m_cycles<span class="p">;</span></td></tr><tr><th id="L198"><a href="#L198">198</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L199"><a href="#L199">199</a></th><td></td></tr><tr><th id="L200"><a href="#L200">200</a></th><td>    std<span class="o">::</span>wstring ToString<span class="p">()</span> <span class="k">const</span></td></tr><tr><th id="L201"><a href="#L201">201</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L202"><a href="#L202">202</a></th><td>        ENSURE<span class="p">(</span>m_cycles <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span></td></tr><tr><th id="L203"><a href="#L203">203</a></th><td>        <span class="k">return</span> StringForCycles<span class="p">(</span>m_cycles<span class="p">);</span></td></tr><tr><th id="L204"><a href="#L204">204</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L205"><a href="#L205">205</a></th><td></td></tr><tr><th id="L206"><a href="#L206">206</a></th><td>    <span class="kt">double</span> ToSeconds<span class="p">()</span> <span class="k">const</span></td></tr><tr><th id="L207"><a href="#L207">207</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L208"><a href="#L208">208</a></th><td>        <span class="k">return</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span>m_cycles <span class="o">/</span> os_cpu_ClockFrequency<span class="p">();</span></td></tr><tr><th id="L209"><a href="#L209">209</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L210"><a href="#L210">210</a></th><td></td></tr><tr><th id="L211"><a href="#L211">211</a></th><td><span class="nl">private:</span></td></tr><tr><th id="L212"><a href="#L212">212</a></th><td>    Cycles m_cycles<span class="p">;</span></td></tr><tr><th id="L213"><a href="#L213">213</a></th><td><span class="p">};</span></td></tr><tr><th id="L214"><a href="#L214">214</a></th><td><span class="cp"></span></td></tr><tr><th id="L215"><a href="#L215">215</a></th><td><span class="cp">#else</span></td></tr><tr><th id="L216"><a href="#L216">216</a></th><td><span class="cp"></span></td></tr><tr><th id="L217"><a href="#L217">217</a></th><td>class TimerUnit</td></tr><tr><th id="L218"><a href="#L218">218</a></th><td><span class="p">{</span></td></tr><tr><th id="L219"><a href="#L219">219</a></th><td><span class="nl">public:</span></td></tr><tr><th id="L220"><a href="#L220">220</a></th><td>    <span class="kt">void</span> SetToZero<span class="p">()</span></td></tr><tr><th id="L221"><a href="#L221">221</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L222"><a href="#L222">222</a></th><td>        m_seconds <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span></td></tr><tr><th id="L223"><a href="#L223">223</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L224"><a href="#L224">224</a></th><td></td></tr><tr><th id="L225"><a href="#L225">225</a></th><td>    <span class="kt">void</span> SetFromTimer<span class="p">()</span></td></tr><tr><th id="L226"><a href="#L226">226</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L227"><a href="#L227">227</a></th><td>        m_seconds <span class="o">=</span> timer_Time<span class="p">();</span></td></tr><tr><th id="L228"><a href="#L228">228</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L229"><a href="#L229">229</a></th><td></td></tr><tr><th id="L230"><a href="#L230">230</a></th><td>    <span class="kt">void</span> AddDifference<span class="p">(</span>TimerUnit t0<span class="p">,</span> TimerUnit t1<span class="p">)</span></td></tr><tr><th id="L231"><a href="#L231">231</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L232"><a href="#L232">232</a></th><td>        m_seconds <span class="o">+=</span> t1<span class="p">.</span>m_seconds <span class="o">-</span> t0<span class="p">.</span>m_seconds<span class="p">;</span></td></tr><tr><th id="L233"><a href="#L233">233</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L234"><a href="#L234">234</a></th><td></td></tr><tr><th id="L235"><a href="#L235">235</a></th><td>    <span class="kt">void</span> AddDifferenceAtomic<span class="p">(</span>TimerUnit t0<span class="p">,</span> TimerUnit t1<span class="p">)</span></td></tr><tr><th id="L236"><a href="#L236">236</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L237"><a href="#L237">237</a></th><td><span class="nl">retry:</span></td></tr><tr><th id="L238"><a href="#L238">238</a></th><td>        i64 oldRepresentation<span class="p">;</span></td></tr><tr><th id="L239"><a href="#L239">239</a></th><td>        memcpy<span class="p">(</span><span class="o">&amp;</span>oldRepresentation<span class="p">,</span> <span class="o">&amp;</span>m_seconds<span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span>oldRepresentation<span class="p">));</span></td></tr><tr><th id="L240"><a href="#L240">240</a></th><td></td></tr><tr><th id="L241"><a href="#L241">241</a></th><td>        <span class="k">const</span> <span class="kt">double</span> seconds <span class="o">=</span> m_seconds <span class="o">+</span> t1<span class="p">.</span>m_seconds <span class="o">-</span> t0<span class="p">.</span>m_seconds<span class="p">;</span></td></tr><tr><th id="L242"><a href="#L242">242</a></th><td>        i64 newRepresentation<span class="p">;</span></td></tr><tr><th id="L243"><a href="#L243">243</a></th><td>        memcpy<span class="p">(</span><span class="o">&amp;</span>newRepresentation<span class="p">,</span> <span class="o">&amp;</span>seconds<span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span>newRepresentation<span class="p">));</span></td></tr><tr><th id="L244"><a href="#L244">244</a></th><td></td></tr><tr><th id="L245"><a href="#L245">245</a></th><td>        <span class="k">if</span><span class="p">(</span><span class="o">!</span>cpu_CAS64<span class="p">((</span><span class="k">volatile</span> i64<span class="o">*</span><span class="p">)</span><span class="o">&amp;</span>m_seconds<span class="p">,</span> oldRepresentation<span class="p">,</span> newRepresentation<span class="p">))</span></td></tr><tr><th id="L246"><a href="#L246">246</a></th><td>            <span class="k">goto</span> retry<span class="p">;</span></td></tr><tr><th id="L247"><a href="#L247">247</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L248"><a href="#L248">248</a></th><td></td></tr><tr><th id="L249"><a href="#L249">249</a></th><td>    <span class="kt">void</span> Subtract<span class="p">(</span>TimerUnit t<span class="p">)</span></td></tr><tr><th id="L250"><a href="#L250">250</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L251"><a href="#L251">251</a></th><td>        m_seconds <span class="o">-=</span> t<span class="p">.</span>m_seconds<span class="p">;</span></td></tr><tr><th id="L252"><a href="#L252">252</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L253"><a href="#L253">253</a></th><td></td></tr><tr><th id="L254"><a href="#L254">254</a></th><td>    std<span class="o">::</span>wstring ToString<span class="p">()</span> <span class="k">const</span></td></tr><tr><th id="L255"><a href="#L255">255</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L256"><a href="#L256">256</a></th><td>        ENSURE<span class="p">(</span>m_seconds <span class="o">&gt;=</span> <span class="mf">0.0</span><span class="p">);</span></td></tr><tr><th id="L257"><a href="#L257">257</a></th><td>        <span class="k">return</span> StringForSeconds<span class="p">(</span>m_seconds<span class="p">);</span></td></tr><tr><th id="L258"><a href="#L258">258</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L259"><a href="#L259">259</a></th><td></td></tr><tr><th id="L260"><a href="#L260">260</a></th><td>    <span class="kt">double</span> ToSeconds<span class="p">()</span> <span class="k">const</span></td></tr><tr><th id="L261"><a href="#L261">261</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L262"><a href="#L262">262</a></th><td>        <span class="k">return</span> m_seconds<span class="p">;</span></td></tr><tr><th id="L263"><a href="#L263">263</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L264"><a href="#L264">264</a></th><td></td></tr><tr><th id="L265"><a href="#L265">265</a></th><td><span class="nl">private:</span></td></tr><tr><th id="L266"><a href="#L266">266</a></th><td>    <span class="kt">double</span> m_seconds<span class="p">;</span></td></tr><tr><th id="L267"><a href="#L267">267</a></th><td><span class="p">};</span></td></tr><tr><th id="L268"><a href="#L268">268</a></th><td><span class="cp"></span></td></tr><tr><th id="L269"><a href="#L269">269</a></th><td><span class="cp">#endif</span></td></tr><tr><th id="L270"><a href="#L270">270</a></th><td><span class="cp"></span></td></tr><tr><th id="L271"><a href="#L271">271</a></th><td><span class="c1">// opaque - do not access its fields!</span></td></tr><tr><th id="L272"><a href="#L272">272</a></th><td><span class="c1">// note: must be defined here because clients instantiate them;</span></td></tr><tr><th id="L273"><a href="#L273">273</a></th><td><span class="c1">// fields cannot be made private due to POD requirement.</span></td></tr><tr><th id="L274"><a href="#L274">274</a></th><td><span class="c1"></span><span class="k">struct</span> TimerClient</td></tr><tr><th id="L275"><a href="#L275">275</a></th><td><span class="p">{</span></td></tr><tr><th id="L276"><a href="#L276">276</a></th><td>    TimerUnit sum<span class="p">;</span>  <span class="c1">// total bill</span></td></tr><tr><th id="L277"><a href="#L277">277</a></th><td><span class="c1"></span></td></tr><tr><th id="L278"><a href="#L278">278</a></th><td>    <span class="c1">// only store a pointer for efficiency.</span></td></tr><tr><th id="L279"><a href="#L279">279</a></th><td><span class="c1"></span>    <span class="k">const</span> <span class="kt">wchar_t</span><span class="o">*</span> description<span class="p">;</span></td></tr><tr><th id="L280"><a href="#L280">280</a></th><td></td></tr><tr><th id="L281"><a href="#L281">281</a></th><td>    TimerClient<span class="o">*</span> next<span class="p">;</span></td></tr><tr><th id="L282"><a href="#L282">282</a></th><td></td></tr><tr><th id="L283"><a href="#L283">283</a></th><td>    <span class="c1">// how often the timer was billed (helps measure relative</span></td></tr><tr><th id="L284"><a href="#L284">284</a></th><td><span class="c1"></span>    <span class="c1">// performance of something that is done indeterminately often).</span></td></tr><tr><th id="L285"><a href="#L285">285</a></th><td><span class="c1"></span>    <span class="kt">intptr_t</span> num_calls<span class="p">;</span></td></tr><tr><th id="L286"><a href="#L286">286</a></th><td><span class="p">};</span></td></tr><tr><th id="L287"><a href="#L287">287</a></th><td></td></tr><tr><th id="L288"><a href="#L288">288</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L289"><a href="#L289">289</a></th><td><span class="cm"> * make the given TimerClient (usually instantiated as static data)</span></td></tr><tr><th id="L290"><a href="#L290">290</a></th><td><span class="cm"> * ready for use. returns its address for TIMER_ADD_CLIENT's convenience.</span></td></tr><tr><th id="L291"><a href="#L291">291</a></th><td><span class="cm"> * this client's total (which is increased by a BillingPolicy) will be</span></td></tr><tr><th id="L292"><a href="#L292">292</a></th><td><span class="cm"> * displayed by timer_DisplayClientTotals.</span></td></tr><tr><th id="L293"><a href="#L293">293</a></th><td><span class="cm"> * notes:</span></td></tr><tr><th id="L294"><a href="#L294">294</a></th><td><span class="cm"> * - may be called at any time;</span></td></tr><tr><th id="L295"><a href="#L295">295</a></th><td><span class="cm"> * - always succeeds (there's no fixed limit);</span></td></tr><tr><th id="L296"><a href="#L296">296</a></th><td><span class="cm"> * - free() is not needed nor possible.</span></td></tr><tr><th id="L297"><a href="#L297">297</a></th><td><span class="cm"> * - description must remain valid until exit; a string literal is safest.</span></td></tr><tr><th id="L298"><a href="#L298">298</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L299"><a href="#L299">299</a></th><td>LIB_API TimerClient<span class="o">*</span> timer_AddClient<span class="p">(</span>TimerClient<span class="o">*</span> tc<span class="p">,</span> <span class="k">const</span> <span class="kt">wchar_t</span><span class="o">*</span> description<span class="p">);</span></td></tr><tr><th id="L300"><a href="#L300">300</a></th><td></td></tr><tr><th id="L301"><a href="#L301">301</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L302"><a href="#L302">302</a></th><td><span class="cm"> * "allocate" a new TimerClient that will keep track of the total time</span></td></tr><tr><th id="L303"><a href="#L303">303</a></th><td><span class="cm"> * billed to it, along with a description string. These are displayed when</span></td></tr><tr><th id="L304"><a href="#L304">304</a></th><td><span class="cm"> * timer_DisplayClientTotals is called.</span></td></tr><tr><th id="L305"><a href="#L305">305</a></th><td><span class="cm"> * Invoke this at file or function scope; a (static) TimerClient pointer of</span></td></tr><tr><th id="L306"><a href="#L306">306</a></th><td><span class="cm"> * name \&lt;id\&gt; will be defined, which should be passed to TIMER_ACCRUE.</span></td></tr><tr><th id="L307"><a href="#L307">307</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L308"><a href="#L308">308</a></th><td><span class="cp">#define TIMER_ADD_CLIENT(id)\</span></td></tr><tr><th id="L309"><a href="#L309">309</a></th><td><span class="cp">    static TimerClient UID__;\</span></td></tr><tr><th id="L310"><a href="#L310">310</a></th><td><span class="cp">    static TimerClient* id = timer_AddClient(&amp;UID__, WIDEN(#id))</span></td></tr><tr><th id="L311"><a href="#L311">311</a></th><td><span class="cp"></span></td></tr><tr><th id="L312"><a href="#L312">312</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L313"><a href="#L313">313</a></th><td><span class="cm"> * bill the difference between t0 and t1 to the client's total.</span></td></tr><tr><th id="L314"><a href="#L314">314</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L315"><a href="#L315">315</a></th><td><span class="k">struct</span> BillingPolicy_Default</td></tr><tr><th id="L316"><a href="#L316">316</a></th><td><span class="p">{</span></td></tr><tr><th id="L317"><a href="#L317">317</a></th><td>    <span class="kt">void</span> operator<span class="p">()(</span>TimerClient<span class="o">*</span> tc<span class="p">,</span> TimerUnit t0<span class="p">,</span> TimerUnit t1<span class="p">)</span> <span class="k">const</span></td></tr><tr><th id="L318"><a href="#L318">318</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L319"><a href="#L319">319</a></th><td>        tc<span class="o">-&gt;</span>sum<span class="p">.</span>AddDifference<span class="p">(</span>t0<span class="p">,</span> t1<span class="p">);</span></td></tr><tr><th id="L320"><a href="#L320">320</a></th><td>        tc<span class="o">-&gt;</span>num_calls<span class="o">++</span><span class="p">;</span></td></tr><tr><th id="L321"><a href="#L321">321</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L322"><a href="#L322">322</a></th><td><span class="p">};</span></td></tr><tr><th id="L323"><a href="#L323">323</a></th><td></td></tr><tr><th id="L324"><a href="#L324">324</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L325"><a href="#L325">325</a></th><td><span class="cm"> * thread-safe (not used by default due to its higher overhead)</span></td></tr><tr><th id="L326"><a href="#L326">326</a></th><td><span class="cm"> * note: we can't just use thread-local variables to avoid</span></td></tr><tr><th id="L327"><a href="#L327">327</a></th><td><span class="cm"> * synchronization overhead because we don't have control over all</span></td></tr><tr><th id="L328"><a href="#L328">328</a></th><td><span class="cm"> * threads (for accumulating their separate timer copies).</span></td></tr><tr><th id="L329"><a href="#L329">329</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L330"><a href="#L330">330</a></th><td><span class="k">struct</span> BillingPolicy_Atomic</td></tr><tr><th id="L331"><a href="#L331">331</a></th><td><span class="p">{</span></td></tr><tr><th id="L332"><a href="#L332">332</a></th><td>    <span class="kt">void</span> operator<span class="p">()(</span>TimerClient<span class="o">*</span> tc<span class="p">,</span> TimerUnit t0<span class="p">,</span> TimerUnit t1<span class="p">)</span> <span class="k">const</span></td></tr><tr><th id="L333"><a href="#L333">333</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L334"><a href="#L334">334</a></th><td>        tc<span class="o">-&gt;</span>sum<span class="p">.</span>AddDifferenceAtomic<span class="p">(</span>t0<span class="p">,</span> t1<span class="p">);</span></td></tr><tr><th id="L335"><a href="#L335">335</a></th><td>        cpu_AtomicAdd<span class="p">(</span><span class="o">&amp;</span>tc<span class="o">-&gt;</span>num_calls<span class="p">,</span> <span class="o">+</span><span class="mi">1</span><span class="p">);</span></td></tr><tr><th id="L336"><a href="#L336">336</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L337"><a href="#L337">337</a></th><td><span class="p">};</span></td></tr><tr><th id="L338"><a href="#L338">338</a></th><td></td></tr><tr><th id="L339"><a href="#L339">339</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L340"><a href="#L340">340</a></th><td><span class="cm"> * display all clients' totals; does not reset them.</span></td></tr><tr><th id="L341"><a href="#L341">341</a></th><td><span class="cm"> * typically called at exit.</span></td></tr><tr><th id="L342"><a href="#L342">342</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L343"><a href="#L343">343</a></th><td>LIB_API <span class="kt">void</span> timer_DisplayClientTotals<span class="p">();</span></td></tr><tr><th id="L344"><a href="#L344">344</a></th><td></td></tr><tr><th id="L345"><a href="#L345">345</a></th><td></td></tr><tr><th id="L346"><a href="#L346">346</a></th><td><span class="c1">/// used by TIMER_ACCRUE</span></td></tr><tr><th id="L347"><a href="#L347">347</a></th><td><span class="c1"></span>template<span class="o">&lt;</span>class BillingPolicy <span class="o">=</span> BillingPolicy_Default<span class="o">&gt;</span></td></tr><tr><th id="L348"><a href="#L348">348</a></th><td>class ScopeTimerAccrue</td></tr><tr><th id="L349"><a href="#L349">349</a></th><td><span class="p">{</span></td></tr><tr><th id="L350"><a href="#L350">350</a></th><td>    NONCOPYABLE<span class="p">(</span>ScopeTimerAccrue<span class="p">);</span></td></tr><tr><th id="L351"><a href="#L351">351</a></th><td><span class="nl">public:</span></td></tr><tr><th id="L352"><a href="#L352">352</a></th><td>    ScopeTimerAccrue<span class="p">(</span>TimerClient<span class="o">*</span> tc<span class="p">)</span></td></tr><tr><th id="L353"><a href="#L353">353</a></th><td>        <span class="o">:</span> m_tc<span class="p">(</span>tc<span class="p">)</span></td></tr><tr><th id="L354"><a href="#L354">354</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L355"><a href="#L355">355</a></th><td>        m_t0<span class="p">.</span>SetFromTimer<span class="p">();</span></td></tr><tr><th id="L356"><a href="#L356">356</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L357"><a href="#L357">357</a></th><td></td></tr><tr><th id="L358"><a href="#L358">358</a></th><td>    <span class="o">~</span>ScopeTimerAccrue<span class="p">()</span></td></tr><tr><th id="L359"><a href="#L359">359</a></th><td>    <span class="p">{</span></td></tr><tr><th id="L360"><a href="#L360">360</a></th><td>        TimerUnit t1<span class="p">;</span></td></tr><tr><th id="L361"><a href="#L361">361</a></th><td>        t1<span class="p">.</span>SetFromTimer<span class="p">();</span></td></tr><tr><th id="L362"><a href="#L362">362</a></th><td>        BillingPolicy<span class="p">()(</span>m_tc<span class="p">,</span> m_t0<span class="p">,</span> t1<span class="p">);</span></td></tr><tr><th id="L363"><a href="#L363">363</a></th><td>    <span class="p">}</span></td></tr><tr><th id="L364"><a href="#L364">364</a></th><td></td></tr><tr><th id="L365"><a href="#L365">365</a></th><td><span class="nl">private:</span></td></tr><tr><th id="L366"><a href="#L366">366</a></th><td>    TimerUnit m_t0<span class="p">;</span></td></tr><tr><th id="L367"><a href="#L367">367</a></th><td>    TimerClient<span class="o">*</span> m_tc<span class="p">;</span></td></tr><tr><th id="L368"><a href="#L368">368</a></th><td><span class="p">};</span></td></tr><tr><th id="L369"><a href="#L369">369</a></th><td></td></tr><tr><th id="L370"><a href="#L370">370</a></th><td><span class="cm">/**</span></td></tr><tr><th id="L371"><a href="#L371">371</a></th><td><span class="cm"> * Measure the time taken to execute code up until end of the current scope; </span></td></tr><tr><th id="L372"><a href="#L372">372</a></th><td><span class="cm"> * bill it to the given TimerClient object. Can safely be nested.</span></td></tr><tr><th id="L373"><a href="#L373">373</a></th><td><span class="cm"> * Useful for measuring total time spent in a function or basic block over the</span></td></tr><tr><th id="L374"><a href="#L374">374</a></th><td><span class="cm"> * entire program.</span></td></tr><tr><th id="L375"><a href="#L375">375</a></th><td><span class="cm"> * `client' is an identifier registered via TIMER_ADD_CLIENT.</span></td></tr><tr><th id="L376"><a href="#L376">376</a></th><td><span class="cm"> * </span></td></tr><tr><th id="L377"><a href="#L377">377</a></th><td><span class="cm"> * Example usage:</span></td></tr><tr><th id="L378"><a href="#L378">378</a></th><td><span class="cm"> *  TIMER_ADD_CLIENT(client);</span></td></tr><tr><th id="L379"><a href="#L379">379</a></th><td><span class="cm"> *</span></td></tr><tr><th id="L380"><a href="#L380">380</a></th><td><span class="cm"> *  void func()</span></td></tr><tr><th id="L381"><a href="#L381">381</a></th><td><span class="cm"> *  {</span></td></tr><tr><th id="L382"><a href="#L382">382</a></th><td><span class="cm"> *      TIMER_ACCRUE(client);</span></td></tr><tr><th id="L383"><a href="#L383">383</a></th><td><span class="cm"> *      // code to be measured</span></td></tr><tr><th id="L384"><a href="#L384">384</a></th><td><span class="cm"> *  }</span></td></tr><tr><th id="L385"><a href="#L385">385</a></th><td><span class="cm"> * </span></td></tr><tr><th id="L386"><a href="#L386">386</a></th><td><span class="cm"> *  [later or at exit]</span></td></tr><tr><th id="L387"><a href="#L387">387</a></th><td><span class="cm"> *  timer_DisplayClientTotals();</span></td></tr><tr><th id="L388"><a href="#L388">388</a></th><td><span class="cm"> **/</span></td></tr><tr><th id="L389"><a href="#L389">389</a></th><td><span class="cp">#define TIMER_ACCRUE(client) ScopeTimerAccrue&lt;&gt; UID__(client)</span></td></tr><tr><th id="L390"><a href="#L390">390</a></th><td><span class="cp">#define TIMER_ACCRUE_ATOMIC(client) ScopeTimerAccrue&lt;BillingPolicy_Atomic&gt; UID__(client)</span></td></tr><tr><th id="L391"><a href="#L391">391</a></th><td><span class="cp"></span></td></tr><tr><th id="L392"><a href="#L392">392</a></th><td><span class="cp">#endif  </span><span class="c1">// #ifndef INCLUDED_TIMER</span></td></tr></tbody></table>

      </div>
      <div id="help"><strong>Note:</strong> See <a href="/wiki/TracBrowser">TracBrowser</a>
        for help on using the repository browser.</div>
      <div id="anydiff">
        <form action="/diff" method="get">
          <div class="buttons">
            <input type="hidden" name="new_path" value="/ps/trunk/source/lib/timer.h" />
            <input type="hidden" name="old_path" value="/ps/trunk/source/lib/timer.h" />
            <input type="hidden" name="new_rev" />
            <input type="hidden" name="old_rev" />
            <input type="submit" value="View changes..." title="Select paths and revs for Diff" />
          </div>
        </form>
      </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="first">
          <a rel="nofollow" href="/browser/ps/trunk/source/lib/timer.h?format=txt">Plain Text</a>
        </li><li class="last">
          <a rel="nofollow" href="/export/12774/ps/trunk/source/lib/timer.h">Original Format</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/chrome/common/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">Powered by <a href="/about"><strong>Trac 0.12.3</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.</p>
      <p class="right"><a href="http://wildfiregames.com/forum">WFG Forums</a></p>
    </div>
  </body>
</html>