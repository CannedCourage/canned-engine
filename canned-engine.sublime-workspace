{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"SetNum",
				"SetNumberInObject"
			],
			[
				"Getb",
				"GetBoolFromObject"
			],
			[
				"GetS",
				"GetStringFromObject"
			],
			[
				"GetBool",
				"GetBoolFromObject"
			],
			[
				"pos",
				"posBeg"
			],
			[
				"c",
				"c_str"
			],
			[
				"w",
				"writeToStream"
			],
			[
				"Pa",
				"ParseJSON"
			],
			[
				"Set",
				"Settings"
			],
			[
				"timesc",
				"timeScaleGlobal"
			],
			[
				"Fi",
				"fixedStepActual"
			],
			[
				"ph",
				"physicsAccumulator"
			],
			[
				"Game",
				"GameLoop"
			],
			[
				"tim",
				"timeScaleGlobal"
			],
			[
				"d",
				"double"
			],
			[
				"fi",
				"fixedStep"
			],
			[
				"ti",
				"timeScaleS"
			],
			[
				"dev",
				"deviceType"
			],
			[
				"ad",
				"adapters"
			],
			[
				"SetC",
				"SetClientSize"
			],
			[
				"Wind",
				"WindowMS"
			],
			[
				"Curs",
				"CursorVisible"
			],
			[
				"cl",
				"clientHeight"
			],
			[
				"clie",
				"clientY"
			],
			[
				"S",
				"System"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/main.cpp",
			"settings":
			{
				"buffer_size": 1586,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/Settings.h",
			"settings":
			{
				"buffer_size": 1535,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include <iostream>\n#include <fstream>\n\n#include \"Settings.h\"\n#include \"StringFunctions.h\"\n\nusing std::ifstream;\nusing std::ofstream;\nusing std::string;\nusing std::ios;\n\nSettings::Settings( char* _filename, char* _delimiter ) : filename( _filename ), root(), delimiter( _delimiter )\n{\n	//it = root.find(\"bool_second\");\n\n	//if( it != root.end() )\n	//	std::cout << it->first << std::endl << it->second;\n\n	/*\n	for( objItr = root.begin(); objItr != root.end(); objItr++ )\n	{\n		log.Message( objItr->first.data() );\n		\n		if( strcmp( objItr->first.data(), \"window\" ) == 0 )\n		{\n			ParseWindowDefaults( objItr->second );\n		}\n\n		if( strcmp( objItr->first.data(), \"client\" ) == 0 )\n		{\n			ParseClientDefaults( objItr->second );\n		}\n	}\n	//*/\n}\n\nSettings::~Settings( void )\n{\n}\n\nvoid Settings::WriteFile( void )\n{\n	Value out( root );\n\n	out.writeToStream( std::cout, true, true );\n\n	out.writeToFile( OUTPUT );\n}\n\nvoid Settings::ReadFile( void )\n{\n	Value in;\n\n	in.loadFromFile( filename );\n\n	//in.writeToFile( COPY );	//Preserve the original\n\n	in.writeToStream( std::cout, true, true );\n\n	Object::iterator it;\n\n	if( in.isObject() )\n	{\n		root = in.getObject();\n	}\n/*\n	if( root.find( \"negative\" ) != root.end() )\n	{\n		std::cout << std::endl << ( root.find( \"negative\" )->first ) << std::endl;\n	}\n	else\n	{\n		std::cout << std::endl << \"JSON element not found.\" << std::endl;\n	}\n//*/\n}\n\nvoid Settings::SetNumber( string name, double value )\n{\n	Value v( root );\n\n	SetNumberInObject( name, value, v );\n\n	root = v.getObject();\n}\n\nvoid Settings::SetString( string name, string value )\n{\n	Value v( root );\n\n	SetStringInObject( name, value, v );\n\n	root = v.getObject();\n}\n\nvoid Settings::SetBool( string name, bool value )\n{\n	Value v( root );\n\n	SetBoolInObject( name, value, v );\n\n	root = v.getObject();\n}\n\nvoid Settings::SetNumberInObject( string name, double value, Value& object )\n{\n	Object obj = object.getObject();\n\n	string d( \"/\" );\n	string first( \"\" );\n	string second( \"\" );\n\n	//Get first substring\n	first = StripPiece( name, d, 0 );\n\n	//Get second substring\n	second = Piece( name, d, 0 );\n	\n	//Is there a second substring?\n	if( second.length() == 0 )\n	{\n		//No\n			//Create Value, initialise with value\n			Value v = Value( value );\n\n			//Is there a value called first substring already?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Set object[ first substring ] equal to the new Value\n					obj[ first.c_str() ] = v;\n					object = Value( obj );\n			}\n			else\n			{\n				//Yes\n					//Is it a number?\n					if( obj[ first.c_str() ].isDouble() )\n					{\n						//Yes\n							//Ok\n					}\n					else\n					{\n						//No\n							//Throw error, don't change type\n					}\n\n				//Set object[ first substring ] equal to the new Value\n				obj[ first.c_str() ] = v;\n				object = obj;\n			}\n	}\n	else\n	{\n		//Yes\n			//Does object matching first substring exist?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Create new Object\n					Object o;\n					Value v( o );\n\n					//Call SetNumberInObject, pass name, value and new object\n					SetNumberInObject( name, value, v );\n\n					//Set object[ first substring ] equal to new object\n					obj[ first.c_str() ] = v;\n					object = obj;\n			}\n			else\n			{\n				//Yes\n					//Get Value\n					Value v = obj[ first.c_str() ];\n\n					//Is the value an object?\n					if( v.isObject() )\n					{\n						//Yes\n							//Ok\n					}\n					else\n					{\n						//No\n							//Throw error, don't change type\n					}\n\n					//Call SetNumberInObject, pass name, value and object\n					SetNumberInObject( name, value, v );\n\n					//Set object[ first substring ] equal to object\n					obj[ first.c_str() ] = v;\n					object = obj;\n			}\n	}\n}\n\nvoid Settings::SetStringInObject( string name, string value, Value& object )\n{\n	Object obj = object.getObject();\n\n	string d( \"/\" );\n	string first( \"\" );\n	string second( \"\" );\n\n	//Get first substring\n	first = StripPiece( name, d, 0 );\n\n	//Get second substring\n	second = Piece( name, d, 0 );\n	\n	//Is there a second substring?\n	if( second.length() == 0 )\n	{\n		//No\n			//Create Value, initialise with value\n			Value v = Value( value );\n\n			//Is there a value called first substring already?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Set object[ first substring ] equal to the new Value\n					obj[ first.c_str() ] = v;\n					object = Value( obj );\n			}\n			else\n			{\n				//Yes\n					//Is it a string?\n					if( obj[ first.c_str() ].isString() )\n					{\n						//Yes\n							//Ok\n					}\n					else\n					{\n						//No\n							//Throw error, don't change type\n					}\n\n				//Set object[ first substring ] equal to the new Value\n				obj[ first.c_str() ] = v;\n				object = obj;\n			}\n	}\n	else\n	{\n		//Yes\n			//Does object matching first substring exist?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Create new Object\n					Object o;\n					Value v( o );\n\n					//Call SetStringInObject, pass name, value and new object\n					SetStringInObject( name, value, v );\n\n					//Set object[ first substring ] equal to new object\n					obj[ first.c_str() ] = v;\n					object = obj;\n			}\n			else\n			{\n				//Yes\n					//Get Value\n					Value v = obj[ first.c_str() ];\n\n					//Is the value an object?\n					if( v.isObject() )\n					{\n						//Yes\n							//Ok\n					}\n					else\n					{\n						//No\n							//Throw error, don't change type\n					}\n\n					//Call SetStringInObject, pass name, value and object\n					SetStringInObject( name, value, v );\n\n					//Set object[ first substring ] equal to object\n					obj[ first.c_str() ] = v;\n					object = obj;\n			}\n	}\n}\n\nvoid Settings::SetBoolInObject( string name, bool value, Value& object )\n{\n	Object obj = object.getObject();\n\n	string d( \"/\" );\n	string first( \"\" );\n	string second( \"\" );\n\n	//Get first substring\n	first = StripPiece( name, d, 0 );\n\n	//Get second substring\n	second = Piece( name, d, 0 );\n	\n	//Is there a second substring?\n	if( second.length() == 0 )\n	{\n		//No\n			//Create Value, initialise with value\n			Value v = Value( value );\n\n			//Is there a value called first substring already?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Set object[ first substring ] equal to the new Value\n					obj[ first.c_str() ] = v;\n					object = Value( obj );\n			}\n			else\n			{\n				//Yes\n					//Is it a bool?\n					if( obj[ first.c_str() ].isBoolean () )\n					{\n						//Yes\n							//Ok\n					}\n					else\n					{\n						//No\n							//Throw error, don't change type\n					}\n\n					//Set object[ first substring ] equal to the new Value\n					obj[ first.c_str() ] = v;\n					object = obj;\n			}\n	}\n	else\n	{\n		//Yes\n			//Does object matching first substring exist?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Create new Object\n					Object o;\n					Value v( o );\n\n					//Call SetBoolInObject, pass name, value and new object\n					SetBoolInObject( name, value, v );\n\n					//Set object[ first substring ] equal to new object\n					obj[ first.c_str() ] = v;\n					object = obj;\n			}\n			else\n			{\n				//Yes\n					//Get Value\n					Value v = obj[ first.c_str() ];\n\n					//Is the value an object?\n					if( v.isObject() )\n					{\n						//Yes\n							//Ok\n					}\n					else\n					{\n						//No\n							//Throw error, don't change type\n					}\n\n					//Call SetBoolInObject, pass name, value and object\n					SetBoolInObject( name, value, v );\n\n					//Set object[ first substring ] equal to object\n					obj[ first.c_str() ] = v;\n					object = obj;\n			}\n	}\n}\n\ndouble Settings::GetNumber( string name )\n{\n	return GetNumberFromObject( name, root );\n}\n\nstring Settings::GetString( string name )\n{\n	return GetStringFromObject( name, root );\n}\n\nbool Settings::GetBool( string name )\n{\n	return GetBoolFromObject( name, root );\n}\n	\ndouble Settings::GetNumberFromObject( string name, Value object )\n{\n	Object obj = object.getObject();\n\n	string d( \"/\" );\n	string first( \"\" );\n	string second( \"\" );\n\n	//Get first substring\n	first = StripPiece( name, d, 0 );\n\n	//Get second substring\n	second = Piece( name, d, 0 );\n	\n	//Is there a second substring?\n	if( second.length() == 0 )\n	{\n		//No\n			//Is there a value called <first substring> already?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Throw error, no such setting exists\n			}\n			else\n			{\n				Value v = obj.find( first.c_str() )->second;\n				//Yes\n					//Is it a number?\n					if( v.isDouble() )\n					{\n						//Yes\n							//Get number from object [ first substring ]\n							return v.getDouble();\n					}\n					else\n					{\n						//No\n							//Throw error, don't change type\n					}\n			}\n	}\n	else\n	{\n		//Yes\n			//Does value matching first substring exist?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Throw error, no such setting exists\n			}\n			else\n			{\n				//Yes\n					//Get Value\n					Value v = obj.find( first.c_str() )->second;\n\n					//Is the value an object?\n					if( v.isObject() )\n					{\n						//Yes\n							//Call GetNumberFromObject, pass name and object\n							return GetNumberFromObject( name, v );\n					}\n					else\n					{\n						//No\n							//Throw error, no sub object\n					}\n			}\n	}\n\n	return 0.0;\n}\n\nstring Settings::GetStringFromObject( string name, Value object )\n{\n	Object obj = object.getObject();\n\n	string d( \"/\" );\n	string first( \"\" );\n	string second( \"\" );\n\n	//Get first substring\n	first = StripPiece( name, d, 0 );\n\n	//Get second substring\n	second = Piece( name, d, 0 );\n	\n	//Is there a second substring?\n	if( second.length() == 0 )\n	{\n		//No\n			//Is there a value called <first substring> already?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Throw error, no such setting exists\n			}\n			else\n			{\n				Value v = obj.find( first.c_str() )->second;\n				//Yes\n					//Is it a string?\n					if( v.isString() )\n					{\n						//Yes\n							//Get string from object [ first substring ]\n							return v.getString();\n					}\n					else\n					{\n						//No\n							//Throw error, don't change type\n					}\n			}\n	}\n	else\n	{\n		//Yes\n			//Does value matching first substring exist?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Throw error, no such setting exists\n			}\n			else\n			{\n				//Yes\n					//Get Value\n					Value v = obj.find( first.c_str() )->second;\n\n					//Is the value an object?\n					if( v.isObject() )\n					{\n						//Yes\n							//Call GetStringFromObject, pass name and object\n							return GetStringFromObject( name, v );\n					}\n					else\n					{\n						//No\n							//Throw error, no sub object\n					}\n			}\n	}\n\n	return string( \"\" );\n}\n\nbool Settings::GetBoolFromObject( string name, Value object )\n{\n	Object obj = object.getObject();\n\n	string d( \"/\" );\n	string first( \"\" );\n	string second( \"\" );\n\n	//Get first substring\n	first = StripPiece( name, d, 0 );\n\n	//Get second substring\n	second = Piece( name, d, 0 );\n	\n	//Is there a second substring?\n	if( second.length() == 0 )\n	{\n		//No\n			//Is there a value called <first substring> already?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Throw error, no such setting exists\n			}\n			else\n			{\n				Value v = obj.find( first.c_str() )->second;\n				//Yes\n					//Is it a bool?\n					if( v.isBoolean() )\n					{\n						//Yes\n							//Get bool from object [ first substring ]\n							return v.getBoolean();\n					}\n					else\n					{\n						//No\n							//Throw error, don't change type\n					}\n			}\n	}\n	else\n	{\n		//Yes\n			//Does value matching first substring exist?\n			if( obj.find( first.c_str() ) == obj.end() )\n			{\n				//No\n					//Throw error, no such setting exists\n			}\n			else\n			{\n				//Yes\n					//Get Value\n					Value v = obj.find( first.c_str() )->second;\n\n					//Is the value an object?\n					if( v.isObject() )\n					{\n						//Yes\n							//Call GetBoolFromObject, pass name and object\n							return GetBoolFromObject( name, v );\n					}\n					else\n					{\n						//No\n							//Throw error, no sub object\n					}\n			}\n	}\n\n	return false;\n}",
			"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/Settings.cpp",
			"file_size": 12356,
			"file_write_time": 130353644671932990,
			"settings":
			{
				"buffer_size": 11730,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/StringFunctions.h",
			"settings":
			{
				"buffer_size": 273,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/StringFunctions.cpp",
			"settings":
			{
				"buffer_size": 1235,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Scott/Programming/Libraries/jsonbox-0.4.3-src/examples/main.cpp",
			"settings":
			{
				"buffer_size": 737,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/test.json",
			"settings":
			{
				"buffer_size": 433,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/output.json",
			"settings":
			{
				"buffer_size": 455,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 311.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"brows",
				"Preferences: Browse Packages"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"package control in",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Add Channel"
			],
			[
				"package control",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Discover Packages"
			],
			[
				"package ins",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/main.cpp",
		"/C/Users/Scott/Desktop/oldsettings",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Engine/Settings.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Engine/Settings.h",
		"/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/Settings.cpp",
		"/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/Settings.h",
		"/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/test.json",
		"/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/copy.json",
		"/C/Users/Scott/Programming/Libraries/jsonbox-0.4.3-src/examples/main.cpp",
		"/C/Users/Scott/Programming/Libraries/jsonbox-0.4.3-src/include/JsonBox.h",
		"/C/Users/Scott/Programming/Libraries/libjson_7.6.1/libjson/_internal/TestSuite/TestSuite.h",
		"/C/Users/Scott/Programming/Libraries/libjson_7.6.1/libjson/_internal/TestSuite/main.cpp",
		"/C/Users/Scott/Programming/Libraries/libjson_7.6.1/libjson/makefile",
		"/C/Users/Scott/Programming/Libraries/libjson_7.6.1/libjson/_internal/TestSuite/RunTestSuite2.cpp",
		"/C/Users/Scott/Programming/Libraries/libjson_7.6.1/libjson/_internal/TestSuite/TestSuite.cpp",
		"/C/Users/Scott/Programming/Libraries/libjson_7.6.1/libjson/_internal/Source/JSONNode.cpp",
		"/C/Users/Scott/Programming/Libraries/libjson_7.6.1/libjson/._JSONOptions.h",
		"/C/Users/Scott/Programming/Libraries/libjson_7.6.1/libjson/libjson.h",
		"/C/Users/Scott/Programming/Libraries/SimpleJSON-master/src/demo/example.cpp",
		"/C/Users/Scott/Programming/Libraries/SimpleJSON-master/src/JSONValue.h",
		"/C/Users/Scott/Programming/Libraries/tinyxml_2_6_2/tinyxml/xmltest.cpp",
		"/C/Users/Scott/Programming/Libraries/tinyxml_2_6_2/tinyxml/readme.txt",
		"/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/output.json",
		"/C/Users/Scott/Programming/Libraries/SimpleJSON-master/src/JSON.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Settings/test.json",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/Graphics.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/Graphics.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Logging/Log.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Logging/Log.h",
		"/C/Users/Scott/Programming/Projects/Scott_Oliver_Engine/Scott_Oliver_Engine/Settings/DefaultSettings.json",
		"/C/Users/Scott/.gimp-2.8/menurc.txt",
		"/C/Users/Scott/.gimp-2.8/menurc",
		"/C/Users/Scott/Desktop/Settings.h",
		"/C/Users/Scott/Programming/Libraries/SimpleJSON-master/src/JSON.cpp",
		"/C/Users/Scott/Programming/Libraries/jsonbox-0.4.3-src/src/Object.cpp",
		"/C/Users/Scott/Programming/Libraries/jsonbox-0.4.3-src/src/Value.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/SceneManager/IScene.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/SceneManager/IScene.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Engine/IEngine.h",
		"/C/Users/Scott/AppData/Roaming/Sublime Text 2/Packages/Github Tools/README.md",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Engine/IEngine.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/System/System.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Settings/DefaultSettings.json",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/Tutorials/PIXGameDebugging/PIXGameDebugging.cpp",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/Tutorials/Tut06_Meshes/Meshes.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/SceneManager/SceneManager.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/System/System.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Windows/WinMain.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Engine/Time.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Engine/Time.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/SceneManager/SceneManager.cpp",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/BasicHLSL/BasicHLSL.fx",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/Tutorials/Tut02_Vertices/Vertices.cpp",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/Tutorials/Tut01_CreateDevice/CreateDevice.cpp",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/BasicHLSL/resource.h",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/BasicHLSL/BasicHLSL.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/OtherIdeas.txt",
		"/C/Users/Scott/AppData/Roaming/Sublime Text 2/Packages/User/C++.sublime-settings",
		"/C/Users/Scott/Downloads/boost_1_55_0.7z",
		"/C/Users/Scott/Downloads/boost_1_55_0/INSTALL",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/PostProcess/PP_ColorBrightPass.fx",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/PostProcess/PostProcess.cpp",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/MeshFromOBJ/MeshFromObj.cpp",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/CompiledEffect/CompiledEffect.fx",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D/ConfigSystem/main.cpp",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D10/ContentStreaming/ContentLoaders.cpp",
		"/C/Program Files (x86)/Microsoft DirectX SDK (June 2010)/Samples/C++/Direct3D10/ContentStreaming/AsyncLoader.cpp",
		"/G/Downloads/Chow Movies/周星驰全集[全粤语]/2004 Kung Fu Hustle [DVD-avi]/功夫NG片断.rmvb",
		"/G/Downloads/Chow Movies/周星驰全集[全粤语]/2004 Kung Fu Hustle [DVD-avi]/Kung.Fu.Hustle.2004.DVDRip.XViD.RETAiL-TLF.nfo",
		"/G/Downloads/Chow Movies/周星驰全集[全粤语]/2004 Kung Fu Hustle [DVD-avi]/Kung.Fu.Hustle.2004.DVDRip.XViD.RETAiL-TLF.idx",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Maths/Clamp.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Maths/Clamp.h",
		"/C/Users/Scott/AppData/Local/Temp/7zOCE4C77E3/Timestep.cpp",
		"/C/Users/Scott/AppData/Local/Temp/7zOCE456203/Apple.h",
		"/C/Users/Scott/AppData/Local/Temp/7zOC2E45142/Windows.h",
		"/C/Users/Scott/AppData/Local/Temp/7zOC2E56CA1/Apple.h",
		"/C/Users/Scott/AppData/Local/Temp/7zOC2E8AF81/Timestep.cpp",
		"/C/Users/Scott/AppData/Local/Temp/7zO0655F137/Windows.h",
		"/C/Users/Scott/AppData/Local/Temp/7zO0652F3F6/Timestep.cpp",
		"/C/Users/Scott/AppData/Local/Temp/7zO06566EB6/Apple.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Engine/Timer.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Engine/Timer.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Window/WindowMS.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/GraphicsSetup.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/GraphicsResolutions.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Window/iWindow.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Window/WindowMS.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Window/iWindow.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Game/Scenes/TestScene.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/SceneManager/SplashScreen.cpp",
		"/C/Users/Scott/Documents/Visual Studio 2010/Projects/Scott_Oliver_Engine/Scott_Oliver_Engine/Graphics/Graphics.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Scrap/graphics.txt",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Scrap/Window.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Window/Window.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Scrap/System.txt",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Window/Window.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Engine/DefaultSettings.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Engine/DefaultSettings.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/Screen.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Window/WindowMS",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/Mesh.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/SceneManager/SplashScreen.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/SceneManager/SceneSwapping.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/SceneManager/Scenes.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Physics/CollisionTests.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Physics/CollisionTests.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Physics/CollisionAreas.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Physics/CollisionAreas.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Maths/VectorDX.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Maths/VectorDX.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Maths/Vector.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Maths/Vector.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Maths/Rect.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Maths/Rect.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/VertexFormats.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/VertexFormats.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/VertexBuffer.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/VertexBuffer.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/Texture.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/Texture.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/Mesh.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/Font.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Graphics/Font.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Game/Scenes/TestScene.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Camera/Metrics.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Camera/CV_Camera.h",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Camera/CV_Camera.cpp",
		"/C/Users/Scott/Programming/Projects/GitHub/canned-engine/Camera/ControlConstants.h"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"C:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010)\\Lib\\x86"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Number",
			"Object",
			"void",
			"root",
			"JSON",
			"s",
			"Result",
			"result",
			"Result",
			"result",
			"bool",
			"Bool",
			"bool",
			"object",
			"root",
			"string",
			"counter",
			"endl",
			"std::",
			"name",
			"s",
			"negative",
			"\\",
			"JSONNode",
			"JSONValue",
			"JSONNode",
			"JSONObject",
			"\\",
			"const ",
			"&",
			"const ",
			"std::",
			"string",
			"String",
			"string",
			"String",
			"string",
			"String",
			"string",
			"std::",
			"static",
			"string_name",
			"Client",
			"client",
			"string_name",
			"Set",
			"\\",
			"s",
			";",
			"min",
			"most",
			"max",
			"min",
			"max",
			"min",
			"max",
			"min",
			";",
			"max",
			";",
			"clamp",
			";",
			"timeScale",
			";",
			"stored",
			"stop",
			"start",
			"Timer",
			"windowed",
			"Windowed",
			"windowed",
			"Windowed",
			"windowed",
			"Windowed",
			"windowed",
			";",
			"= ",
			"settings.window.height",
			"settings.window.width",
			"settings.window.y",
			"settings.window.x",
			"settings.client.width",
			"settings.client.y",
			"settings.client.x",
			"Cursor",
			"cursor",
			"window",
			"Window",
			"window",
			"client",
			"window",
			"Window",
			"Cursor",
			" = 0",
			"Window",
			"window",
			"Window",
			"DefaultSettings",
			"0",
			")",
			"(",
			")",
			"x",
			"screen",
			"L",
			"Scripts",
			"\\",
			"system",
			"System",
			"system",
			"manager",
			"system",
			"SceneManager",
			"this",
			"\"\n",
			"settings->",
			"manager->",
			"settings->",
			"device->",
			"device",
			"graphics->",
			"window->",
			"System::",
			"settings->",
			"device",
			"manager->",
			"device",
			"graphics->"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"sys"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/main.cpp",
					"settings":
					{
						"buffer_size": 1586,
						"regions":
						{
						},
						"selection":
						[
							[
								564,
								564
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/Settings.h",
					"settings":
					{
						"buffer_size": 1535,
						"regions":
						{
						},
						"selection":
						[
							[
								38,
								38
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/Settings.cpp",
					"settings":
					{
						"buffer_size": 11730,
						"regions":
						{
						},
						"selection":
						[
							[
								6255,
								6255
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1415.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/StringFunctions.h",
					"settings":
					{
						"buffer_size": 273,
						"regions":
						{
						},
						"selection":
						[
							[
								273,
								273
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/StringFunctions.cpp",
					"settings":
					{
						"buffer_size": 1235,
						"regions":
						{
						},
						"selection":
						[
							[
								32,
								32
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/Scott/Programming/Libraries/jsonbox-0.4.3-src/examples/main.cpp",
					"settings":
					{
						"buffer_size": 737,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/test.json",
					"settings":
					{
						"buffer_size": 433,
						"regions":
						{
						},
						"selection":
						[
							[
								193,
								200
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/C/Users/Scott/Programming/Projects/Settings_TestHarness/Settings_TestHarness/Settings_TestHarness/output.json",
					"settings":
					{
						"buffer_size": 455,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 118.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"scen",
				"SceneManager/SceneManager.cpp"
			],
			[
				"grap",
				"Graphics/Graphics.h"
			],
			[
				"ien",
				"Engine/IEngine.cpp"
			],
			[
				"iengin",
				"Engine/IEngine.h"
			],
			[
				"isc",
				"SceneManager/IScene.h"
			],
			[
				"iscne",
				"SceneManager/IScene.cpp"
			],
			[
				"mod",
				"Engine/Modules.h"
			],
			[
				"sc",
				"SceneManager/SceneManager_Windows.cpp"
			],
			[
				"",
				"SceneManager/SceneManager.h"
			],
			[
				"winmai",
				"Windows/WinMain.cpp"
			],
			[
				"sceneman",
				"SceneManager/SceneManager.cpp"
			],
			[
				"scne",
				"SceneManager/SceneManager_Windows.cpp"
			],
			[
				"ieng",
				"Engine/IEngine.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 250.0,
	"status_bar_visible": true
}
